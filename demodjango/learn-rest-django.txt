Serialization is the process of converting data structures or objects into a format that
can be easily transmitted or stored and later reconstructed or deserialized back into their
original form. In the context of Django REST Framework (DRF) or any web framework dealing
with APIs, serialization is particularly important for converting complex data types, 
such as database models, into a format that can be easily transmitted over the network,
typically in formats like JSON or XML.

pip install djangorestframework
create a file serializers.py in same directory where the models.py exist

paste this code and change it according to you in serializers.py
from rest_framework import serializers
from .models import Product

class SnippetSerializer(serializers.Serializer):
    id = serializers.IntegerField(read_only=True)
    title = serializers.CharField(required=False, allow_blank=True, max_length=100)
    code = serializers.CharField(style={'base_template': 'textarea.html'})
    linenos = serializers.BooleanField(required=False)
    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python')
    style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly')

    def create(self, validated_data):
        """
        Create and return a new `Snippet` instance, given the validated data.
        """
        return Snippet.objects.create(**validated_data)

    def update(self, instance, validated_data):
        """
        Update and return an existing `Snippet` instance, given the validated data.
        """
        instance.title = validated_data.get('title', instance.title)
        instance.code = validated_data.get('code', instance.code)
        instance.linenos = validated_data.get('linenos', instance.linenos)
        instance.language = validated_data.get('language', instance.language)
        instance.style = validated_data.get('style', instance.style)
        instance.save()
        return instance