# install django on virtual enviroment
# python -m venv myfolder name
# -m means module
# into the virtual enviroment which have created go there  and check there is scripts folder and there activate file run it in cmd
# cd myfoldername cd scripts and .\activate
# pip install django
#  django-admin startproject projectname
# python manage.py runserver (to run this project)


///// models 
from django.db import models
class Product(models.Model):
    name = models.CharField(max_length=50)
    price = models.CharField(max_length=50)
    description = models.TextField()

python manage.py startapp service 
to access the serice of admin and model it will create a service folder 
makemigrations command to make model schema
migrate command to create table in database

///// url give the of the url in 3rd argument access it {% url 'calculator' as url %}

//////// DRY component
in base.html file
{% include 'header.html' %}
{% block content %}
{% endblock %}

in about html file 
{% extends 'base.html' %}
{% block content %}
<div>{{productDetail.name}}</div>
<div>{{productDetail.description | safe}}</div>
{% comment %} <div>{% lorem 16 %}</div> {% endcomment %}
{% endblock %}

//////// https request form data handling how to access data
(
fot the post request is give csrf-token
<form method="post">
{% csrf_token %}
in the html templete
    )
if request.method == 'POST':
        name = request.POST.get('pName')
        price = request.POST.get('price')
        description = request.POST.get('description')
        insertInProduct = Product(name=name,price=price,description=description)
        insertInProduct.save()

if request.method == 'GET':
        n2=request.GET['pass']

////////// Redirect page
from django.http import HttpResponseRedirect
def about_us(request):
    return HttpResponse('hi there')
    another way
from django.shortcuts import render,redirect
def about_us(request):
    return redirect('hi there')


////// django form


//// To create super user 
python manage.py createsuperuser

///////// To get data from database and queries and limiting
productData = Product.objects.all().order_by('-name') in decending order
productData = Product.objects.all().order_by('name')[2:3] limiting data

////////// Tamplate filter
Safe (safe): Marks a string as safe for HTML output. It disables HTML escaping for the variable.

{{ value|safe }}

Escape (escape): Escapes special characters in a string so that it can be safely displayed as HTML
{{ value|escape }}

Length (length): Returns the length of a list or the number of characters in a string.
{{ value|length }}

Lowercase (lower): Converts a string to lowercase.
{{ value|lower }}

Uppercase (upper): Converts a string to uppercase.
{{ value|upper }}

Titlecase (title): Converts the first character of each word in a string to uppercase.
{{ value|title }}

Date (date): Formats a date according to the given format string.
{{ value|date:"Y-m-d" }}

Time (time): Formats a time according to the given format string.
{{ value|time:"H:i:s" }}

Default (default): Sets a default value if the variable is not defined or is empty.
{{ value|default:"No value" }}

Slice (slice): Returns a slice of a list or string.
{{ value|slice:"2:5" }}

/////////// pip install django-tinymce this is a richeditor in admin page to use html properties

/////////// prams in d jango
product/<id>/

/////////// change password of admin 
python manage.py changepassword usernnameofadmin

///////////// searching in database filters
productData = Product.objects.filter(name=searchKey) this will search if both the equal matches
productData = Product.objects.filter(name__icontains=searchKey) this will search if the string alike

///////////// django-autoslug pip library use to make unique url "the-is-the-example-of-url" 


////////// Pagination in django //////////

from django.core.paginator import Paginator
productData = Product.objects.all()
    paginator = Paginator(productData,2)
    pageNumber= request.GET.get('page')
    dataOnPage= paginator.get_page(pageNumber)
    lastPage= dataOnPage.paginator.num_pages

    data={'product':dataOnPage,
          'lastPage':lastPage,
          'totalPageList':[n+1 for n in range(lastPage)]
          }

 {% if product.has_previous %}
        <a href="/?page={{product.previous_page_number}}">Previous</a>
        &nbsp;
        <a href="/?page=1">First Page</a>

        {% endif %}
      
      {% for n in totalPageList %}
      &nbsp;
      <a href="/?page={{n}}">{{n}}</a>
      &nbsp;
      {% endfor %}
 
        {% if product.has_next %}
        <a href="/?page={{lastPage}}">Last Page</a>
        &nbsp;
        <a href="/?page={{product.next_page_number}}">Next</a>

        {% endif %}


            